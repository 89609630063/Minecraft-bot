const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

const token = process.env.BOT_TOKEN; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ENV-–ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è Railway
const bot = new TelegramBot(token, { polling: true });

const jsonPath = path.join(__dirname, 'data/recipes_converted.json');

// ‚úÖ –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π JSON
if (!fs.existsSync(jsonPath)) {
    console.log("‚ö† –§–∞–π–ª recipes_converted.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π...");
    fs.mkdirSync(path.dirname(jsonPath), { recursive: true }); // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    fs.writeFileSync(jsonPath, JSON.stringify({ recipes: [] }, null, 4), 'utf-8');
}

// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
let recipes = {}; // –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–¥–∏–Ω —Ä–∞–∑

try {
    recipes = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));
    console.log("‚úÖ Recipes –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
} catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON:", error.message);
}
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.onText(/(.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("üì© –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", match[1]);

    const userItems = match[1]
        .toLowerCase()
        .replace(/\s+/g, '') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        .split(',')
        .map(i => i.trim());

    console.log("üîé –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç –¥–ª—è:", userItems);

    let foundRecipes = [];

    // –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    Object.keys(recipes).forEach(recipe => {
        if (recipes[recipe] && Array.isArray(recipes[recipe].ingredients)) {
            const recipeItems = recipes[recipe].ingredients.map(i => i.toLowerCase().replace(/\s+/g, ''));

            console.log(`üÜö –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ä–µ—Ü–µ–ø—Ç–æ–º: ${recipe} ‚Üí ${recipeItems}`);

            if (JSON.stringify(recipeItems.sort()) === JSON.stringify(userItems.sort())) {
                foundRecipes.push(recipe);
            }
        }
    });

    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ—Ü–µ–ø—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (foundRecipes.length > 0) {
        for (let recipe of foundRecipes) {
            const imagePath = `./images/${recipe}.png`;
            if (fs.existsSync(imagePath)) {
                bot.sendPhoto(chatId, imagePath, { caption: `–ò–∑ ${userItems.join(', ')} –º–æ–∂–Ω–æ —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å: ${recipe}` });
            } else {
                console.error(`‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª ${imagePath} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
                bot.sendMessage(chatId, `–ò–∑ ${userItems.join(', ')} –º–æ–∂–Ω–æ —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å: ${recipe}, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`);
            }
        }
    } else {
        console.log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.");
        bot.sendMessage(chatId, "–¢–∞–∫–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —Å–ª–æ–∂–Ω–µ–µ.");
    }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è Railway, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –≤—ã–∫–ª—é—á–∞–ª—Å—è
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
setInterval(() => {
    console.log("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç...");
}, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –±–æ—Ç –ø–∏—à–µ—Ç –≤ –ª–æ–≥–∏, —á—Ç–æ–±—ã Railway –Ω–µ –≤—ã–∫–ª—é—á–∞–ª –µ–≥–æ