const fs = require('fs');

const inputPath = 'recipes.json'; // –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
const outputPath = 'recipes_converted.json'; // –§–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç

// –ß–∏—Ç–∞–µ–º `recipes.json`
try {
    const rawData = fs.readFileSync(inputPath, 'utf-8');
    const recipes = JSON.parse(rawData);

    console.log("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º `recipes.json` ‚Üí `recipes_converted.json`...");

    // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç JSON
    let formattedRecipes = [];

    // –û–±—Ö–æ–¥–∏–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã
    for (let key in recipes) {
        if (recipes.hasOwnProperty(key)) {
            const recipe = recipes[key];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–µ—Ü–µ–ø—Ç–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            if (recipe.ingredients && Array.isArray(recipe.ingredients)) {
                formattedRecipes.push({
                    name: key,
                    ingredients: recipe.ingredients.map(i => i.item) // –î–æ—Å—Ç–∞—ë–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                });
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
    fs.access(outputPath, fs.constants.W_OK, (err) => {
        if (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ ${outputPath}`);
            process.exit(1);
        } else {
            console.log(`‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞ –∑–∞–ø–∏—Å—å –≤ ${outputPath} –µ—Å—Ç—å`);

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ `recipes_converted.json`
            fs.writeFileSync(outputPath, JSON.stringify(formattedRecipes, null, 4), 'utf-8');
            console.log("‚úÖ recipes_converted.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
        }
    });

} catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON:", error.message);
}